#### 赋值 (=)就是创建了对象的一个新的引用，修改其中任意一个变量都会影响到另一个
import copy

def fuzhi():
    a = [1,2]
    b = a
    print("没改变b值时,a和b的值:",a,b) ### [1, 2] [1, 2]
    ### 修改b, a也随之改变 (注意是修改,而不是重新给 b 赋值)
    b.append(3) 
    print("改变b值时,a和b的值:",a,b) ### [1, 2, 3] [1, 2, 3]

    ## 打印 a , b的地址
    print("a,b的地址: ",id(a),id(b)) ### 1810258324616 1810258324616
    
       
    
    
"""浅拷贝:浅拷贝会新建一个对象，拷贝对象与原对象的变化间有无关联.要看原对象中的元素类型
如果是可变参数,则会影响; 如果是不可变参数则不会影响."""
def qian_copy_1():
    
    ############# a 中的元素(int型)是不可变对象 情况 ############
    a = [1,2]
    b = a.copy()
    print("没改变b值时,a和b的值:",a,b)  ### [1, 2] [1, 2]
    ### 浅拷贝只是拷贝了一层,所以 b 与 a 不是同一个引用
    b.append(30)
    print("改变b值时,a和b的值:",a,b)  ### [1, 2] [1,2,3]

    ## 打印 a , b的地址
    print("a,b的地址: ",id(a),id(b))  #### 2461021105480 2461021105416


def qian_copy_2():
   ############# a 中的元素(int型)是 可变对象 情况 ############
    a = [[1],[2]]
    b = a.copy()
    
    # print(id(a),id(b)) ### 第一层引用地址是不一样:3028232891528 3028232891464
    # print(id(a[0]),id(b[0])) ### 第二层应用地址就一样了:3028232891720 3028232891720
    
    print("没改变b值时,a和b的值:",a,b)  ### [[1], [2]] [[1], [2]]
    ### 浅拷贝只是拷贝了一层,所以 b 与 a 不是同一个引用,但是: b[0] 与 a[0] 都是同一个引用
    b[0].append(10)
    print("改变b值时,a和b的值:",a,b)  ### [[1, 10], [2]] [[1, 10], [2]]

    ## 打印 a , b的地址
    print("a,b的地址: ",id(a),id(b))  #### 1581996698760 1581996698696






#####深拷贝：创建一个新的对象，并且递归的复制它所包含的对象（修改其中一个，另外一个不会改变）
def deep_copy():
    a = [[1],2,3]
    b = copy.deepcopy(a)
    #### 深拷贝指拷贝数据集合的所有层,所以 b 与 a 不是同一个引用,而且 b[0] 与 a[0] 也不是同一个引用
    b[0].append(100)
    
    print("改变b值时,a和b的值:",a,b) #### [[1], 2, 3] [[1, 100], 2, 3]
    
    ## 打印 a , b的地址
    print("a,b的地址: ",id(a),id(b)) #### 2476710030600 2476710030472
    
# fuzhi()
# qian_copy_1()
qian_copy_2()
# deep_copy()